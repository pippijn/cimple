%{
#include "sxlex-help.h"
%}

%option prefix="sx"
%option bison-locations
%option reentrant
%option yylineno
%option noyywrap nounput noinput nounistd
%option never-interactive

%%
"("				{ Punctuation (LBRACK); }
")"				{ Punctuation (RBRACK); }
[0-9]+			{ Token (INTEGER_CONSTANT); }

"NIL"				{ Keyword (SX_NIL); }
"loc"				{ Keyword (SX_LOC); }
"token"			{ Keyword (SX_TOKEN); }
"ast_list"		{ Keyword (SX_AST_LIST); }

"add"		{ Keyword (SX_ADD); }
"add_assign"		{ Keyword (SX_ADD_ASSIGN); }
"address_of"		{ Keyword (SX_ADDRESS_OF); }
"alignof_type"		{ Keyword (SX_ALIGNOF_TYPE); }
"alignof_var"		{ Keyword (SX_ALIGNOF_VAR); }
"and_assign"		{ Keyword (SX_AND_ASSIGN); }
"array_abstract_declarator"		{ Keyword (SX_ARRAY_ABSTRACT_DECLARATOR); }
"array_access"		{ Keyword (SX_ARRAY_ACCESS); }
"array_labelled_initialised"		{ Keyword (SX_ARRAY_LABELLED_INITIALISED); }
"asm361"		{ Keyword (SX_ASM361); }
"asm_argument"		{ Keyword (SX_ASM_ARGUMENT); }
"asm_clobbered"		{ Keyword (SX_ASM_CLOBBERED); }
"asm_statement"		{ Keyword (SX_ASM_STATEMENT); }
"assign"		{ Keyword (SX_ASSIGN); }
"attrib375"		{ Keyword (SX_ATTRIB375); }
"attrib376"		{ Keyword (SX_ATTRIB376); }
"attrib377"		{ Keyword (SX_ATTRIB377); }
"attrib378"		{ Keyword (SX_ATTRIB378); }
"attrib379"		{ Keyword (SX_ATTRIB379); }
"attribute"		{ Keyword (SX_ATTRIBUTE); }
"attributes370"		{ Keyword (SX_ATTRIBUTES370); }
"attributes371"		{ Keyword (SX_ATTRIBUTES371); }
"auto_str_class_spec"		{ Keyword (SX_AUTO_STR_CLASS_SPEC); }
"basic_declaration_specifier21"		{ Keyword (SX_BASIC_DECLARATION_SPECIFIER21); }
"basic_declaration_specifier22"		{ Keyword (SX_BASIC_DECLARATION_SPECIFIER22); }
"basic_declaration_specifier23"		{ Keyword (SX_BASIC_DECLARATION_SPECIFIER23); }
"basic_declaration_specifier24"		{ Keyword (SX_BASIC_DECLARATION_SPECIFIER24); }
"basic_type_specifier41"		{ Keyword (SX_BASIC_TYPE_SPECIFIER41); }
"basic_type_specifier42"		{ Keyword (SX_BASIC_TYPE_SPECIFIER42); }
"basic_type_specifier43"		{ Keyword (SX_BASIC_TYPE_SPECIFIER43); }
"bit_field_size"		{ Keyword (SX_BIT_FIELD_SIZE); }
"bitwise_and"		{ Keyword (SX_BITWISE_AND); }
"bitwise_negate"		{ Keyword (SX_BITWISE_NEGATE); }
"bitwise_or"		{ Keyword (SX_BITWISE_OR); }
"bitwise_xor"		{ Keyword (SX_BITWISE_XOR); }
"brace_expression"		{ Keyword (SX_BRACE_EXPRESSION); }
"bracket_expression"		{ Keyword (SX_BRACKET_EXPRESSION); }
"bracketed_initialiser_list"		{ Keyword (SX_BRACKETED_INITIALISER_LIST); }
"break_statement"		{ Keyword (SX_BREAK_STATEMENT); }
"case_label_statement"		{ Keyword (SX_CASE_LABEL_STATEMENT); }
"char_constant"		{ Keyword (SX_CHAR_CONSTANT); }
"char_type_spec"		{ Keyword (SX_CHAR_TYPE_SPEC); }
"clean_postfix_typedef_declarator"		{ Keyword (SX_CLEAN_POSTFIX_TYPEDEF_DECLARATOR); }
"clean_typedef_declarator"		{ Keyword (SX_CLEAN_TYPEDEF_DECLARATOR); }
"comma_expression"		{ Keyword (SX_COMMA_EXPRESSION); }
"complex_type_qualifier"		{ Keyword (SX_COMPLEX_TYPE_QUALIFIER); }
"compound_literal"		{ Keyword (SX_COMPOUND_LITERAL); }
"compound_statement"		{ Keyword (SX_COMPOUND_STATEMENT); }
"const_type_qualifier"		{ Keyword (SX_CONST_TYPE_QUALIFIER); }
"continue_statement"		{ Keyword (SX_CONTINUE_STATEMENT); }
"decl_initialiser"		{ Keyword (SX_DECL_INITIALISER); }
"declaration1"		{ Keyword (SX_DECLARATION1); }
"declaration3"		{ Keyword (SX_DECLARATION3); }
"declaration4"		{ Keyword (SX_DECLARATION4); }
"declaration_qualifier_list31"		{ Keyword (SX_DECLARATION_QUALIFIER_LIST31); }
"declaration_qualifier_list33"		{ Keyword (SX_DECLARATION_QUALIFIER_LIST33); }
"declarator384"		{ Keyword (SX_DECLARATOR384); }
"declaring_list10"		{ Keyword (SX_DECLARING_LIST10); }
"declaring_list11"		{ Keyword (SX_DECLARING_LIST11); }
"declaring_list12"		{ Keyword (SX_DECLARING_LIST12); }
"declaring_list13"		{ Keyword (SX_DECLARING_LIST13); }
"declaring_list9"		{ Keyword (SX_DECLARING_LIST9); }
"default_declaring_list14"		{ Keyword (SX_DEFAULT_DECLARING_LIST14); }
"default_declaring_list15"		{ Keyword (SX_DEFAULT_DECLARING_LIST15); }
"default_declaring_list16"		{ Keyword (SX_DEFAULT_DECLARING_LIST16); }
"default_label_statement"		{ Keyword (SX_DEFAULT_LABEL_STATEMENT); }
"designated_initialiser"		{ Keyword (SX_DESIGNATED_INITIALISER); }
"divide"		{ Keyword (SX_DIVIDE); }
"divide_assign"		{ Keyword (SX_DIVIDE_ASSIGN); }
"do_statement"		{ Keyword (SX_DO_STATEMENT); }
"double_type_spec"		{ Keyword (SX_DOUBLE_TYPE_SPEC); }
"enum_specifier"		{ Keyword (SX_ENUM_SPECIFIER); }
"enumerator"		{ Keyword (SX_ENUMERATOR); }
"enumerator_value"		{ Keyword (SX_ENUMERATOR_VALUE); }
"equals"		{ Keyword (SX_EQUALS); }
"expression_statement"		{ Keyword (SX_EXPRESSION_STATEMENT); }
"extern_str_class_spec"		{ Keyword (SX_EXTERN_STR_CLASS_SPEC); }
"external_definition385"		{ Keyword (SX_EXTERNAL_DEFINITION385); }
"float_type_spec"		{ Keyword (SX_FLOAT_TYPE_SPEC); }
"floating_constant"		{ Keyword (SX_FLOATING_CONSTANT); }
"for_statement"		{ Keyword (SX_FOR_STATEMENT); }
"function_call"		{ Keyword (SX_FUNCTION_CALL); }
"function_declaration"		{ Keyword (SX_FUNCTION_DECLARATION); }
"function_definition"		{ Keyword (SX_FUNCTION_DEFINITION); }
"function_definition_dqual"		{ Keyword (SX_FUNCTION_DEFINITION_DQUAL); }
"function_definition_tqual"		{ Keyword (SX_FUNCTION_DEFINITION_TQUAL); }
"gcc_extension386"		{ Keyword (SX_GCC_EXTENSION386); }
"goto_statement"		{ Keyword (SX_GOTO_STATEMENT); }
"greater_than"		{ Keyword (SX_GREATER_THAN); }
"greater_than_equals"		{ Keyword (SX_GREATER_THAN_EQUALS); }
"hex_constant"		{ Keyword (SX_HEX_CONSTANT); }
"identifier"		{ Keyword (SX_IDENTIFIER); }
"if_statement"		{ Keyword (SX_IF_STATEMENT); }
"imag_expression"		{ Keyword (SX_IMAG_EXPRESSION); }
"include_directive"		{ Keyword (SX_INCLUDE_DIRECTIVE); }
"initialiser121"		{ Keyword (SX_INITIALISER121); }
"inline_type_qualifier"		{ Keyword (SX_INLINE_TYPE_QUALIFIER); }
"int_type_spec"		{ Keyword (SX_INT_TYPE_SPEC); }
"integer_constant"		{ Keyword (SX_INTEGER_CONSTANT); }
"label_statement"		{ Keyword (SX_LABEL_STATEMENT); }
"left_shift_assign"		{ Keyword (SX_LEFT_SHIFT_ASSIGN); }
"less_than"		{ Keyword (SX_LESS_THAN); }
"less_than_equals"		{ Keyword (SX_LESS_THAN_EQUALS); }
"line_directive"		{ Keyword (SX_LINE_DIRECTIVE); }
"logical_and"		{ Keyword (SX_LOGICAL_AND); }
"logical_not"		{ Keyword (SX_LOGICAL_NOT); }
"logical_or"		{ Keyword (SX_LOGICAL_OR); }
"long_type_spec"		{ Keyword (SX_LONG_TYPE_SPEC); }
"modulo"		{ Keyword (SX_MODULO); }
"modulo_assign"		{ Keyword (SX_MODULO_ASSIGN); }
"multiply"		{ Keyword (SX_MULTIPLY); }
"multiply_assign"		{ Keyword (SX_MULTIPLY_ASSIGN); }
"negate"		{ Keyword (SX_NEGATE); }
"node_list"		{ Keyword (SX_NODE_LIST); }
"node_merge"		{ Keyword (SX_NODE_MERGE); }
"node_opt"		{ Keyword (SX_NODE_OPT); }
"not_equals"		{ Keyword (SX_NOT_EQUALS); }
"octal_constant"		{ Keyword (SX_OCTAL_CONSTANT); }
"or_assign"		{ Keyword (SX_OR_ASSIGN); }
"parameter_declaration"		{ Keyword (SX_PARAMETER_DECLARATION); }
"parameter_declaration156"		{ Keyword (SX_PARAMETER_DECLARATION156); }
"parameter_declaration157"		{ Keyword (SX_PARAMETER_DECLARATION157); }
"parameter_declaration158"		{ Keyword (SX_PARAMETER_DECLARATION158); }
"parameter_type_list"		{ Keyword (SX_PARAMETER_TYPE_LIST); }
"parameter_typedef_declarator70"		{ Keyword (SX_PARAMETER_TYPEDEF_DECLARATOR70); }
"parameter_typedef_declarator71"		{ Keyword (SX_PARAMETER_TYPEDEF_DECLARATOR71); }
"paren_identifier_declarator"		{ Keyword (SX_PAREN_IDENTIFIER_DECLARATOR); }
"paren_postfix_typedef_declarator"		{ Keyword (SX_PAREN_POSTFIX_TYPEDEF_DECLARATOR); }
"paren_typedef_declarator"		{ Keyword (SX_PAREN_TYPEDEF_DECLARATOR); }
"pointer"		{ Keyword (SX_POINTER); }
"pointer_access"		{ Keyword (SX_POINTER_ACCESS); }
"pointer_dereference"		{ Keyword (SX_POINTER_DEREFERENCE); }
"positive"		{ Keyword (SX_POSITIVE); }
"post_decrement"		{ Keyword (SX_POST_DECREMENT); }
"post_increment"		{ Keyword (SX_POST_INCREMENT); }
"postfix_abstract_declarator"		{ Keyword (SX_POSTFIX_ABSTRACT_DECLARATOR); }
"postfix_identifier_declarator"		{ Keyword (SX_POSTFIX_IDENTIFIER_DECLARATOR); }
"postfixing_abstract_declarator90"		{ Keyword (SX_POSTFIXING_ABSTRACT_DECLARATOR90); }
"pre_decrement"		{ Keyword (SX_PRE_DECREMENT); }
"pre_increment"		{ Keyword (SX_PRE_INCREMENT); }
"real_expression"		{ Keyword (SX_REAL_EXPRESSION); }
"register_str_class_spec"		{ Keyword (SX_REGISTER_STR_CLASS_SPEC); }
"restrict_pointer_type_qualifier"		{ Keyword (SX_RESTRICT_POINTER_TYPE_QUALIFIER); }
"restrict_type_qualifier"		{ Keyword (SX_RESTRICT_TYPE_QUALIFIER); }
"return_statement"		{ Keyword (SX_RETURN_STATEMENT); }
"right_shift_assign"		{ Keyword (SX_RIGHT_SHIFT_ASSIGN); }
"shift_left"		{ Keyword (SX_SHIFT_LEFT); }
"shift_right"		{ Keyword (SX_SHIFT_RIGHT); }
"short_type_spec"		{ Keyword (SX_SHORT_TYPE_SPEC); }
"signer_type_spec"		{ Keyword (SX_SIGNER_TYPE_SPEC); }
"simple_paren_typedef_declarator"		{ Keyword (SX_SIMPLE_PAREN_TYPEDEF_DECLARATOR); }
"sizeof_type"		{ Keyword (SX_SIZEOF_TYPE); }
"sizeof_var"		{ Keyword (SX_SIZEOF_VAR); }
"statement350"		{ Keyword (SX_STATEMENT350); }
"static_str_class_spec"		{ Keyword (SX_STATIC_STR_CLASS_SPEC); }
"string_literal"		{ Keyword (SX_STRING_LITERAL); }
"struct"		{ Keyword (SX_STRUCT); }
"struct_access"		{ Keyword (SX_STRUCT_ACCESS); }
"struct_declaration"		{ Keyword (SX_STRUCT_DECLARATION); }
"struct_declaration382"		{ Keyword (SX_STRUCT_DECLARATION382); }
"struct_declaration_list"		{ Keyword (SX_STRUCT_DECLARATION_LIST); }
"struct_declarator"		{ Keyword (SX_STRUCT_DECLARATOR); }
"struct_declaring_list325"		{ Keyword (SX_STRUCT_DECLARING_LIST325); }
"struct_declaring_list327"		{ Keyword (SX_STRUCT_DECLARING_LIST327); }
"struct_declaring_list392"		{ Keyword (SX_STRUCT_DECLARING_LIST392); }
"struct_default_declaring_list1"		{ Keyword (SX_STRUCT_DEFAULT_DECLARING_LIST1); }
"struct_default_declaring_list2"		{ Keyword (SX_STRUCT_DEFAULT_DECLARING_LIST2); }
"struct_identifier_declarator"		{ Keyword (SX_STRUCT_IDENTIFIER_DECLARATOR); }
"struct_or_union_specifier"		{ Keyword (SX_STRUCT_OR_UNION_SPECIFIER); }
"subtract"		{ Keyword (SX_SUBTRACT); }
"subtract_assign"		{ Keyword (SX_SUBTRACT_ASSIGN); }
"sue_declaration_specifier25"		{ Keyword (SX_SUE_DECLARATION_SPECIFIER25); }
"sue_declaration_specifier26"		{ Keyword (SX_SUE_DECLARATION_SPECIFIER26); }
"sue_declaration_specifier27"		{ Keyword (SX_SUE_DECLARATION_SPECIFIER27); }
"sue_type_specifier44"		{ Keyword (SX_SUE_TYPE_SPECIFIER44); }
"sue_type_specifier46"		{ Keyword (SX_SUE_TYPE_SPECIFIER46); }
"switch_statement"		{ Keyword (SX_SWITCH_STATEMENT); }
"ternary_op"		{ Keyword (SX_TERNARY_OP); }
"translation_unit"		{ Keyword (SX_TRANSLATION_UNIT); }
"type_cast"		{ Keyword (SX_TYPE_CAST); }
"type_name"		{ Keyword (SX_TYPE_NAME); }
"type_name151"		{ Keyword (SX_TYPE_NAME151); }
"type_specifier_nosue387"		{ Keyword (SX_TYPE_SPECIFIER_NOSUE387); }
"typedef_declaration_specifier28"		{ Keyword (SX_TYPEDEF_DECLARATION_SPECIFIER28); }
"typedef_declaration_specifier29"		{ Keyword (SX_TYPEDEF_DECLARATION_SPECIFIER29); }
"typedef_declaration_specifier30"		{ Keyword (SX_TYPEDEF_DECLARATION_SPECIFIER30); }
"typedef_name"		{ Keyword (SX_TYPEDEF_NAME); }
"typedef_str_class_spec"		{ Keyword (SX_TYPEDEF_STR_CLASS_SPEC); }
"typedef_type_specifier47"		{ Keyword (SX_TYPEDEF_TYPE_SPECIFIER47); }
"typedef_type_specifier49"		{ Keyword (SX_TYPEDEF_TYPE_SPECIFIER49); }
"typeof_expression388"		{ Keyword (SX_TYPEOF_EXPRESSION388); }
"typeof_expression389"		{ Keyword (SX_TYPEOF_EXPRESSION389); }
"typeof_type_specifier"		{ Keyword (SX_TYPEOF_TYPE_SPECIFIER); }
"unary_expression383"		{ Keyword (SX_UNARY_EXPRESSION383); }
"unary_identifier_declarator"		{ Keyword (SX_UNARY_IDENTIFIER_DECLARATOR); }
"union"		{ Keyword (SX_UNION); }
"unsigned_type_spec"		{ Keyword (SX_UNSIGNED_TYPE_SPEC); }
"va_arg_expression"		{ Keyword (SX_VA_ARG_EXPRESSION); }
"va_list_type_spec"		{ Keyword (SX_VA_LIST_TYPE_SPEC); }
"void_type_spec"		{ Keyword (SX_VOID_TYPE_SPEC); }
"volatile_type_qualifier"		{ Keyword (SX_VOLATILE_TYPE_QUALIFIER); }
"wchar_constant"		{ Keyword (SX_WCHAR_CONSTANT); }
"wchar_type_spec"		{ Keyword (SX_WCHAR_TYPE_SPEC); }
"while_statement"		{ Keyword (SX_WHILE_STATEMENT); }
"xor_assign"		{ Keyword (SX_XOR_ASSIGN); }
"KW_ALIGNOF"		{ Keyword (SX_KW_ALIGNOF); }
"KW_ASM"		{ Keyword (SX_KW_ASM); }
"KW_ATTRIBUTE"		{ Keyword (SX_KW_ATTRIBUTE); }
"KW_AUTO"		{ Keyword (SX_KW_AUTO); }
"KW_BREAK"		{ Keyword (SX_KW_BREAK); }
"KW_CASE"		{ Keyword (SX_KW_CASE); }
"KW_CHAR"		{ Keyword (SX_KW_CHAR); }
"KW_COMPLEX"		{ Keyword (SX_KW_COMPLEX); }
"KW_CONST"		{ Keyword (SX_KW_CONST); }
"KW_CONTINUE"		{ Keyword (SX_KW_CONTINUE); }
"KW_DEFAULT"		{ Keyword (SX_KW_DEFAULT); }
"KW_DO"		{ Keyword (SX_KW_DO); }
"KW_DOUBLE"		{ Keyword (SX_KW_DOUBLE); }
"KW_ELSE"		{ Keyword (SX_KW_ELSE); }
"KW_ENUM"		{ Keyword (SX_KW_ENUM); }
"KW_EXTENSION"		{ Keyword (SX_KW_EXTENSION); }
"KW_EXTERN"		{ Keyword (SX_KW_EXTERN); }
"KW_FLOAT"		{ Keyword (SX_KW_FLOAT); }
"KW_FOR"		{ Keyword (SX_KW_FOR); }
"KW_GOTO"		{ Keyword (SX_KW_GOTO); }
"KW_IF"		{ Keyword (SX_KW_IF); }
"KW_IMAG"		{ Keyword (SX_KW_IMAG); }
"KW_INLINE"		{ Keyword (SX_KW_INLINE); }
"KW_INT"		{ Keyword (SX_KW_INT); }
"KW_LONG"		{ Keyword (SX_KW_LONG); }
"KW_REAL"		{ Keyword (SX_KW_REAL); }
"KW_REGISTER"		{ Keyword (SX_KW_REGISTER); }
"KW_RESTRICT"		{ Keyword (SX_KW_RESTRICT); }
"KW_RETURN"		{ Keyword (SX_KW_RETURN); }
"KW_SHORT"		{ Keyword (SX_KW_SHORT); }
"KW_SIGNED"		{ Keyword (SX_KW_SIGNED); }
"KW_SIZEOF"		{ Keyword (SX_KW_SIZEOF); }
"KW_STATIC"		{ Keyword (SX_KW_STATIC); }
"KW_STRUCT"		{ Keyword (SX_KW_STRUCT); }
"KW_SWITCH"		{ Keyword (SX_KW_SWITCH); }
"KW_TYPEDEF"		{ Keyword (SX_KW_TYPEDEF); }
"KW_TYPEOF"		{ Keyword (SX_KW_TYPEOF); }
"KW_UNION"		{ Keyword (SX_KW_UNION); }
"KW_UNSIGNED"		{ Keyword (SX_KW_UNSIGNED); }
"KW_VA_ARG"		{ Keyword (SX_KW_VA_ARG); }
"KW_VA_LIST"		{ Keyword (SX_KW_VA_LIST); }
"KW_VOID"		{ Keyword (SX_KW_VOID); }
"KW_VOLATILE"		{ Keyword (SX_KW_VOLATILE); }
"KW_WCHAR_T"		{ Keyword (SX_KW_WCHAR_T); }
"KW_WHILE"		{ Keyword (SX_KW_WHILE); }
"TK_AND"		{ Keyword (SX_TK_AND); }
"TK_ANDAND"		{ Keyword (SX_TK_ANDAND); }
"TK_AND_EQ"		{ Keyword (SX_TK_AND_EQ); }
"TK_ARROW"		{ Keyword (SX_TK_ARROW); }
"TK_CARET"		{ Keyword (SX_TK_CARET); }
"TK_CARET_EQ"		{ Keyword (SX_TK_CARET_EQ); }
"TK_CHAR_CONSTANT"		{ Keyword (SX_TK_CHAR_CONSTANT); }
"TK_COLON"		{ Keyword (SX_TK_COLON); }
"TK_COMMA"		{ Keyword (SX_TK_COMMA); }
"TK_COMMENT"		{ Keyword (SX_TK_COMMENT); }
"TK_DEC"		{ Keyword (SX_TK_DEC); }
"TK_ELLIPSIS"		{ Keyword (SX_TK_ELLIPSIS); }
"TK_EOF"		{ Keyword (SX_TK_EOF); }
"TK_EQEQ"		{ Keyword (SX_TK_EQEQ); }
"TK_EQUALS"		{ Keyword (SX_TK_EQUALS); }
"TK_ERROR"		{ Keyword (SX_TK_ERROR); }
"TK_EXMARK"		{ Keyword (SX_TK_EXMARK); }
"TK_FLOATING_CONSTANT"		{ Keyword (SX_TK_FLOATING_CONSTANT); }
"TK_GREATER"		{ Keyword (SX_TK_GREATER); }
"TK_GREATER_EQ"		{ Keyword (SX_TK_GREATER_EQ); }
"TK_GTGT"		{ Keyword (SX_TK_GTGT); }
"TK_GTGT_EQ"		{ Keyword (SX_TK_GTGT_EQ); }
"TK_HASH"		{ Keyword (SX_TK_HASH); }
"TK_HASHHASH"		{ Keyword (SX_TK_HASHHASH); }
"TK_HEX_CONSTANT"		{ Keyword (SX_TK_HEX_CONSTANT); }
"TK_IDENTIFIER"		{ Keyword (SX_TK_IDENTIFIER); }
"TK_INC"		{ Keyword (SX_TK_INC); }
"TK_INCLUDE"		{ Keyword (SX_TK_INCLUDE); }
"TK_INTEGER_CONSTANT"		{ Keyword (SX_TK_INTEGER_CONSTANT); }
"TK_LBRACE"		{ Keyword (SX_TK_LBRACE); }
"TK_LBRACK"		{ Keyword (SX_TK_LBRACK); }
"TK_LESS"		{ Keyword (SX_TK_LESS); }
"TK_LESS_EQ"		{ Keyword (SX_TK_LESS_EQ); }
"TK_LSQBRACK"		{ Keyword (SX_TK_LSQBRACK); }
"TK_LTLT"		{ Keyword (SX_TK_LTLT); }
"TK_LTLT_EQ"		{ Keyword (SX_TK_LTLT_EQ); }
"TK_MINUS"		{ Keyword (SX_TK_MINUS); }
"TK_MINUS_EQ"		{ Keyword (SX_TK_MINUS_EQ); }
"TK_NE"		{ Keyword (SX_TK_NE); }
"TK_OCTAL_CONSTANT"		{ Keyword (SX_TK_OCTAL_CONSTANT); }
"TK_PERCENT"		{ Keyword (SX_TK_PERCENT); }
"TK_PERCENT_EQ"		{ Keyword (SX_TK_PERCENT_EQ); }
"TK_PERIOD"		{ Keyword (SX_TK_PERIOD); }
"TK_PIPE"		{ Keyword (SX_TK_PIPE); }
"TK_PIPE_EQ"		{ Keyword (SX_TK_PIPE_EQ); }
"TK_PIPEPIPE"		{ Keyword (SX_TK_PIPEPIPE); }
"TK_PLUS"		{ Keyword (SX_TK_PLUS); }
"TK_PLUS_EQ"		{ Keyword (SX_TK_PLUS_EQ); }
"TK_QMARK"		{ Keyword (SX_TK_QMARK); }
"TK_RBRACE"		{ Keyword (SX_TK_RBRACE); }
"TK_RBRACK"		{ Keyword (SX_TK_RBRACK); }
"TK_RSQBRACK"		{ Keyword (SX_TK_RSQBRACK); }
"TK_SEMICOLON"		{ Keyword (SX_TK_SEMICOLON); }
"TK_SLASH"		{ Keyword (SX_TK_SLASH); }
"TK_SLASH_EQ"		{ Keyword (SX_TK_SLASH_EQ); }
"TK_STAR"		{ Keyword (SX_TK_STAR); }
"TK_STAR_EQ"		{ Keyword (SX_TK_STAR_EQ); }
"TK_STRING_LITERAL"		{ Keyword (SX_TK_STRING_LITERAL); }
"TK_TILDE"		{ Keyword (SX_TK_TILDE); }
"TK_TYPEDEF_NAME"		{ Keyword (SX_TK_TYPEDEF_NAME); }
"TK_WCHAR_CONSTANT"		{ Keyword (SX_TK_WCHAR_CONSTANT); }
"TK_WSTRING_LITERAL"		{ Keyword (SX_TK_WSTRING_LITERAL); }
\"(\\.|[^\\"])*\"	{ Token (STRING_LITERAL); }
[^() "\n;]+		{ Token (STRING_LITERAL); }
[ \n]			{ }
.				{ Token (ERROR); }
